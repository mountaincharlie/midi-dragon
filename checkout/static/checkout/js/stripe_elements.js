// jshint esversion: 6

/**
 * CREDITS:
 * Setup Stripe.js and Submit the payment to Stripe sections used for setting
 * up the stripe and elements vars, styling the card element:
 * [https://stripe.com/docs/payments/accept-a-payment?platform=web&ui=elements]
 * 
 * Stripe.js creating and mounting the card element and form submit event
 * listner:
 * [https://stripe.com/docs/payments/accept-card-payments?platform=web&ui=elements]
 * 
 * 'change' event listener and form 'submit' event listener logic adapted to fit this project, from Code Institute's walkthrough:
 * [https://github.com/Code-Institute-Solutions/boutique_ado_v1/blob/933797d5e14d6c3f072df31adf0ca6f938d02218/checkout/static/checkout/js/stripe_elements.js]
 */


// ------ GLOBAL VARS

// gets stripe_public_key and client_secret text without the ' '
let stripePublicKey = document.getElementById('id_stripe_public_key').innerText.slice(1, -1);
let clientSecret = document.getElementById('id_client_secret').innerText.slice(1, -1);

// using stripe's builtin JS to setup Stripe with our stripePublicKey
let stripe = Stripe(stripePublicKey);
// create instance of stripe elements
let elements = stripe.elements();

// defines the highlightInterval to be used later to set and stop the interval for highlightCircle() call
let highlightInterval = 0;

// gets the 'card-errors' div for creating and displaying potential errors
let errorDiv = document.getElementById('card-errors');

// gets the 'payment-submit-button' button to disable it after submission to prevent multiple form submissions
let formSubmitButton = document.getElementById('payment-submit-button');

// the card element can accept a style argument [syntax from stripe styles docs but with custom styles to fit the site style]
var style = {
    base: {
        color: '#9A9EAE',
        backgroundColor: '#1D212E',
        iconColor: '#00D1CF',
        fontSize: '16px',
        '::placeholder': {
            color: '#9A9EAE',
        }
    },
    invalid: {
        color: '#fc5a5a',
        iconColor: '#fc5a5a',
    }
};

// creates, styles and mounts the Stripe card element
let card = elements.create('card', {style: style});
card.mount('#card-element');

// gets the card-element element
let cardElement = document.getElementById('card-element');


// ------ EVENT LISTENER - handling real-time errors on card element
/**
 * Adapted from Code Institue's walkthrough [link in file docstring]
 * Applies 'change' event listener to the card element
 * Checks for errors everytime the card elements input changes
 * Gets the card-errors div (near card div on checkout page)
 * so that if there are errors they can be displayed to the user
 * through this
 * If theres an error in the event, the message is created and put into
 * the card-errors div
*/
card.addEventListener('change', function(ev) {
    if (ev.error) {
        let error_msg_html = `
            <span role="alert">
                <i class="fa-solid fa-circle-xmark"></i>
            </span>
            <span>${ev.error.message}</span>
        `
        errorDiv.innerHTML = error_msg_html;
    } else {
        errorDiv.innerText = '';
    };
});


// ------ EVENT LISTENER - handling the form submit with 'submit' Ev Listener
/**
 * Adapted from Code Institue's walkthrough [link in file docstring]
 * 
 * Gets the 'payment-form' form element and applies the 'submit' Event Listener
 * to it.
 * The default action (POST) is prevented so that other actions can be taken
 * first
 * Applies the 'disabled' attribute (setting any value will set disabled as
 * True) to the card elememt and submit button to prevent mutiple submissions.
 * 
 * Calls jquery's fadeToggle method on 'payment-form' and
 * 'payment-processing-overlay' to hide one and reveal the other.
 * Applies the 'd-flex' class to the 'payment-processing-overlay' so that it
 * displays centrally.
 * Calls highlightCircle() custom function with Javascript's setInterval()
 * method (calls highlightCircle() every 300 miliseconds)
 * Gets the csrf token generated by django on our form and passes it into the
 * postFormData dictionary along with 'client_secret' and defines the url to 
 * the cache_checkout_data view function, so that these variables can be passed
 * into jquery's asynchronous post method.
 * Calls jquery's asynchronous post method with done method triggering the 
 * callback function which checks that the payment intent is successfully
 * updated before calling the confirmed payment method.
 * The callback function contains the below:
 * -Uses stripe's confirmCardPayment method to securely send the card details
 * to stripe with the clientSecret
 * -Then checks if there is an error and if there is, it constructs the message
 * and applies it as the innerHTML of the errorDiv
 * -Then it calls the fadeToggle on 'payment-form' and
 * 'payment-processing-overlay' again to reveal the form and hide the overlay,
 * removes the 'd-flex' class from the overlay, calls Javascript's
 * clearInterval() method to stop the highlightCircle() being called and
 * removes the disabled attributes from the cardElement and formSubmitButton so
 * that the user can fix the error and resubmit the form.
 * -If there are no errors, the paymentIntent's status is set to
 * 'succeeded' and the form is submitted
 * -At the end of the done method call, the fail method is applied to
 * handle when a 400 response is returned, calling Javascript's
 * clearInterval() method to stop the highlightCircle() being called reloading
 * the window for the current url.
*/
let form = document.getElementById('payment-form');

form.addEventListener('submit', function(ev) {
    ev.preventDefault();

    cardElement.setAttribute('disabled', 'true');  
    formSubmitButton.setAttribute('disabled', 'true');

    $('#payment-form').fadeToggle(100);
    $('#payment-processing-overlay').fadeToggle(100);
    $('#payment-processing-overlay').addClass('d-flex');
    highlightInterval = setInterval(highlightCircle, 300);

    let csrfToken = document.getElementsByName('csrfmiddlewaretoken')[0].value;

    let postFormData = {
        'csrfmiddlewaretoken': csrfToken,
        'client_secret': clientSecret,
    };
    let url = '/checkout/cache_checkout_data/';

    $.post(url, postFormData).done(function() {

        stripe.confirmCardPayment(clientSecret, {
            payment_method: {
                card: card,
                billing_details: {
                    name: form.full_name.value.trim(),
                    email: form.email.value.trim(),
                }
            },
        }).then(function(result) {
            if (result.error) {
                let error_msg_html = `
                        <span role="alert">
                            <i class="fa-solid fa-circle-xmark"></i>
                        </span>
                        <span>${result.error.message}</span>
                    `
                    errorDiv.innerHTML = error_msg_html;

                $('#payment-form').fadeToggle(100);
                $('#payment-processing-overlay').fadeToggle(100);
                $('#payment-processing-overlay').removeClass('d-flex');
                clearInterval(highlightInterval);
    
                cardElement.removeAttribute('disabled');
                formSubmitButton.removeAttribute('disabled');  

            } else {
                if (result.paymentIntent.status === 'succeeded') {
                    form.submit();
                    console.log('PAYMENT SUCCESS - form submitted')
                };
            };
        });
    }).fail(function() {
        clearInterval(highlightInterval);
        window.location = document.URL;
        console.log('PAYMENT FAILED')
    });
});


/**
 * @name highlightCircle
 * @description custom method
 * Called in the setInterval() method when
 * the payment-processing-overlay is displayed on screen
 * while the payment is being processed.
 * Gets each of the circle icons from the overlay's div
 * and stroes them as circleOne/Two/Three.
 * If circleOne contains the 'circle-highlight' class,
 * then it is removed from circleOne and added to circleTwo.
 * Similarly if CircleTwo or CircleThree have the class then
 * it is removed from them and added to the next circle.
 * If none of these conditions are satisfied then the
 * clearInterval() method is called to cancel the setInterval()
 * but the payment-processing-overlay will still be visible for
 * as long as its required.
*/
function highlightCircle(){
    
    let circleOne = document.getElementById('circle-1');
    let circleTwo = document.getElementById('circle-2');
    let circleThree = document.getElementById('circle-3');

    if (circleOne.classList.contains('circle-highlight')){
        circleOne.classList.remove('circle-highlight');
        circleTwo.classList.add('circle-highlight');
        console.log('one to two')
    } else if (circleTwo.classList.contains('circle-highlight')){
        circleTwo.classList.remove('circle-highlight');
        circleThree.classList.add('circle-highlight');
        console.log('two to three')
    } else if (circleThree.classList.contains('circle-highlight')){
        circleThree.classList.remove('circle-highlight');
        circleOne.classList.add('circle-highlight');
        console.log('three to one')
    } else {
        clearInterval(highlightInterval);
    };
};
