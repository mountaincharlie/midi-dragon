// jshint esversion: 6

/**
 * CREDITS
 * 
 * [Setup Stripe.js and Submit the payment to Stripe section] https://stripe.com/docs/payments/accept-a-payment?platform=web&ui=elements
 * Stripe.js creating and mounting the card element and form submit event listner [https://stripe.com/docs/payments/accept-card-payments?platform=web&ui=elements]
 * 
 * Logic adapted from CI walkthrough
 * https://github.com/Code-Institute-Solutions/boutique_ado_v1/blob/933797d5e14d6c3f072df31adf0ca6f938d02218/checkout/static/checkout/js/stripe_elements.js
 */


// ---- GLOBAL VARS

// getting stripe_public_key and client_secret text without first and last chars (the '')
let stripePublicKey = document.getElementById('id_stripe_public_key').innerText.slice(1, -1);
let clientSecret = document.getElementById('id_client_secret').innerText.slice(1, -1);

// console.log('stripePublicKey', stripePublicKey)
// console.log('clientSecret', clientSecret)

// let clientSecret = $('#id_client_secret').text().slice(1, -1);
// let stripePublicKey = $('#id_stripe_public_key').text().slice(1, -1);

// using stripe's builtin JS to setup Stripe with our stripePublicKey
let stripe = Stripe(stripePublicKey);
// create instance of stripe elements
let elements = stripe.elements();

// defines the highlightInterval to be used later to set and stop the interval for highlightCircle() call
let highlightInterval = 0;

// the card element can accept a style argument [syntax from stripe styles docs]
var style = {
    base: {
        color: '#9A9EAE',
        backgroundColor: '#1D212E',
        iconColor: '#00D1CF',
        fontFamily: '"BioRhyme", sans-serif',
        fontSize: '16px',
        '::placeholder': {
            color: '#9A9EAE',
            // fontFamily: '"BioRhyme", sans-serif',
        }
    },
    invalid: {
        // using midi-warning class color
        color: '#fc5a5a',
        iconColor: '#fc5a5a'
    }
};

// creates, styles and mounts the Stripe card element
let card = elements.create('card', {style: style});
// using stripe's method to mount the card to the #card-element div 
card.mount('#card-element');

let cardElement = document.getElementById('card-element');
console.log('cardElement', cardElement)


// ------ Event Listener - handling real-time errors on card element
/**
 * Applying a 'change' event listener to the card element
 * Checks for errors everytime the card elements input changes
 * -gets the card-errors div (near card div on checkout page)
 * so that if there are errors they can be displayed to the user
 * through this
 * -if theres an error in the event, the message is created and put into
 * the card-errors div
*/

card.addEventListener('change', function(ev) {
    let errorDiv = document.getElementById('card-errors');
    // console.log('errorDiv', errorDiv)
    if (ev.error) {
        let error_msg_html = `
            <span role="alert">
                <i class="fa-solid fa-circle-xmark"></i>
            </span>
            <span>${ev.error.message}</span>
        `
        errorDiv.innerHTML = error_msg_html;
    } else {
        errorDiv.innerText = '';
    }
});


// ------ Event Listener - handling the form submit with 'submit' Ev Listener
/*
    -gets the 'payment-form' form element
    -applies Ev Listener to this element
    -the default action (POST) is prevented
    -disables the card element and submit button to prevent mutiple
    submissions
    -calls the fadeToggle on 'payment-form' and 'payment-processing-overlay'
    -gets the csrf token generated by django on our form
    -creates an object to contain this data to pass to the webhook_handler.py
    view
    -creates a url var for the new /checkout/cache_checkout_data/
    -posts all this data to the cache_checkout_data view
    -adding the .done method with callback function to check that the
    payment intent is successfully updated before calling the confirmed
    payment method
    -the callback function contain sthe below:
    -uses stripe's confirmCardPayment method to securely send
    the card details to stripe with the clientSecret
    -then checks if there is an error
    -if there is, it gets the card-errors div, creates
    the error message and then puts it in the div
    -then it calls the fadeToggle on 'payment-form' and 'payment-processing-overlay'
    and turns off the disable on the card element and submit
    button so the user could correct the error and when the submit
    button is clicked again, the Ev Listener would eb called again
    -if there are no errors, the paymentIntent's status is set to
    'succeeded' and the form is submitted
    -at the end of the done method call, the fail method is applied to
    handle when a 400 response is returned, reloading the window for the
    current url
*/
let form = document.getElementById('payment-form');

console.log('form', form)

form.addEventListener('submit', function(ev) {
    ev.preventDefault();

    console.log('form being submitted')

    // disabling cardElement and submit button to prevent multiple payments
    // console.log('cardElement', cardElement)
    cardElement.setAttribute('disabled', 'true');  // sets true
    
    // gets the payment-submit-button button to disable it
    let formSubmitButton = document.getElementById('payment-submit-button');
    formSubmitButton.setAttribute('disabled', 'true');  // passing any value sets it to true
    // console.log('payment-submit-button', formSubmitButton)

    // uses jquery fadeToggle method to hide payment form and show processing overlay [CREDIT - CI walkthrough]
    $('#payment-form').fadeToggle(100);
    $('#payment-processing-overlay').fadeToggle(100);
    $('#payment-processing-overlay').addClass('d-flex');
    // calling the set highlightCircle function in JS setInterval method with 200ms
    highlightInterval = setInterval(highlightCircle, 300);

    let csrfToken = document.getElementsByName('csrfmiddlewaretoken')[0].value;
    // console.log('csrfToken', csrfToken)

    // gets the csrfmiddlewaretoken and client_secret to pass into the asynchronous post method as postFormData and the url for the cache_checkout_data view method
    let postFormData = {
        'csrfmiddlewaretoken': csrfToken,
        'client_secret': clientSecret,
    };
    let url = '/checkout/cache_checkout_data/';

    // using jquery .post() method to send asynchronous http post request [CREDIT - CI walkthrough CREDIT in docstring]
    $.post(url, postFormData).done(function() {

        // confirms card payment and sends securely to Stripe
        stripe.confirmCardPayment(clientSecret, {
            payment_method: {
                card: card,
                billing_details: {
                    name: form.full_name.value.trim(),
                    email: form.email.value.trim(),
                }
            },
        }).then(function(result) {
            if (result.error) {

                let errorDiv = document.getElementById('card-errors');  // make global var?

                let error_msg_html = `
                        <span role="alert">
                            <i class="fa-solid fa-circle-xmark"></i>
                        </span>
                        <span>${result.error.message}</span>
                    `
                    errorDiv.innerHTML = error_msg_html;
    
                // using jquery fadeToggle method [CREDIT - CI walkthrough]

                // reveals payment form again and hides processing overlay if there are errors with the card (e.g. not authorised or insufficient funds)
                $('#payment-form').fadeToggle(100);
                $('#payment-processing-overlay').fadeToggle(100);
                // removes the d-flex class so it will be hidden
                $('#payment-processing-overlay').removeClass('d-flex');
                // clears the interval calling circleHighlight()
                clearInterval(highlightInterval)
    
                // removes the disabled attricute from the card element
                cardElement.removeAttribute('disabled');
    
                // gets the payment-submit-button button and removes its disabled attribute
                let formSubmitButton = document.getElementById('payment-submit-button');
                formSubmitButton.removeAttribute('disabled');  // make GLOBAL var?

            } else {
                // submitting the form if the payment intent succeeds
                if (result.paymentIntent.status === 'succeeded') {
                    form.submit();
                    console.log('PAYMENT SUCCESS - form submitted')
                }
            }
        });
    }).fail(function() {
        // clear circleHighlight interval
        clearInterval(highlightInterval)
        // just reloads the page and the error message will be displayed
        // and the user wont be charged
        // [CREDIT - linehammer on https://dev.to/mmeurer00/location-reload-a55]
        window.location = document.URL;
        console.log('PAYMENT FAILED')
    });
    
});


// CUSTOM highlightCircle method
/**
 * @name highlightCircle
 * @description 
*/
function highlightCircle(){
    
    let circleOne = document.getElementById('circle-1');
    let circleTwo = document.getElementById('circle-2');
    let circleThree = document.getElementById('circle-3');

    if (circleOne.classList.contains('circle-highlight')){
        circleOne.classList.remove('circle-highlight');
        circleTwo.classList.add('circle-highlight');
        console.log('one to two')
    } else if (circleTwo.classList.contains('circle-highlight')){
        circleTwo.classList.remove('circle-highlight');
        circleThree.classList.add('circle-highlight');
        console.log('two to three')
    } else if (circleThree.classList.contains('circle-highlight')){
        circleThree.classList.remove('circle-highlight');
        circleOne.classList.add('circle-highlight');
        console.log('three to one')
    } else {
        console.log('SOMETHING WENT WRONG')
    };
};
